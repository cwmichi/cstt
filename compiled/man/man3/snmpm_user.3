.TH snmpm_user 3 "snmp 4.24.2" "Ericsson AB" "Erlang Module Definition"
.SH NAME
snmpm_user \- Behaviour module for the SNMP manager user.
.SH DESCRIPTION
.LP
This module defines the behaviour of the manager user\&. A \fIsnmpm_user\fR\& compliant module must export the following functions:
.RS 2
.TP 2
*
handle_error/3
.LP
.TP 2
*
handle_agent/4
.LP
.TP 2
*
handle_pdu/4
.LP
.TP 2
*
handle_trap/3
.LP
.TP 2
*
handle_inform/3
.LP
.TP 2
*
handle_report/3
.LP
.RE

.LP
The semantics of them and their exact signatures are explained below\&.
.LP
Note that if an agent is registered using the old, no longer documented, functions (using Addr and Port), the old variant of the callback functions, handle_pdu, handle_trap, handle_inform and handle_report, will be called\&.
.SH EXPORTS
.LP
.B
handle_error(ReqId, Reason, UserData) -> Reply
.br
.RS
.LP
Types:

.RS 3
ReqId = integer()
.br
Reason = {unexpected_pdu, SnmpInfo} | {invalid_sec_info, SecInfo, SnmpInfo} | {empty_message, Addr, Port} | term()
.br
Addr = ip_address()
.br
Port = integer()
.br
UserData = term()
.br
Reply = ignore
.br
.RE
.RE
.RS
.LP
This function is called when the manager needs to communicate an "asynchronous" error, to the user: e\&.g\&. failure to send an asynchronous message (i\&.e\&. encoding error), a received message was discarded due to security error, the manager failed to generate a response message to a received inform-request, or when receiving an unexpected PDU from an agent (could be an expired async request)\&.
.LP
If \fIReqId\fR\& is less then 0, it means that this information was not available to the manager (that info was never retrieved before the message was discarded)\&.
.LP
For \fISnmpInfo\fR\& see handle_agent below\&.
.RE
.LP
.B
handle_agent(Addr, Port, Type, SnmpInfo, UserData) -> Reply
.br
.RS
.LP
Types:

.RS 3
Addr = ip_address()
.br
Port = integer()
.br
Type = pdu | trap | report | inform
.br
SnmpInfo = SnmpPduInfo | SnmpTrapInfo | SnmpReportInfo | SnmpInformInfo
.br
ErrorStatus = atom()
.br
ErrorIndex = integer()
.br
Varbinds = [varbind()]
.br
varbind() = #varbind
.br
UserData = term()
.br
Reply = ignore | {register, UserId, TargetName, agent_info()}
.br
UserId = term()
.br
TargetName = target_name()
.br
agent_info() = [{agent_info_item(), agent_info_value()}]
.br
.RE
.RE
.RS
.LP
This function is called when a message is received from an unknown agent\&.
.LP
Note that this will always be the default user that is called\&.
.LP
For more info about the \fIagent_info()\fR\&, see \fBregister_agent\fR\&\&.
.LP
The arguments \fIType\fR\& and \fISnmpInfo\fR\& relates in the following way:
.RS 2
.TP 2
*
\fIpdu\fR\& - \fISnmpPduInfo\fR\& (see \fBhandle_pdu\fR\& for more info)\&.
.LP
.TP 2
*
\fItrap\fR\& - \fISnmpTrapInfo\fR\& (see \fBhandle_trap\fR\& for more info)\&.
.LP
.TP 2
*
\fIreport\fR\& - \fISnmpReportInfo\fR\& (see \fBhandle_report\fR\& for more info)\&.
.LP
.TP 2
*
\fIinform\fR\& - \fISnmpInformInfo\fR\& (see \fBhandle_inform\fR\& for more info)\&.
.LP
.RE

.LP
The only user which would return \fI{register, UserId, TargetName, agent_info()}\fR\& is the \fIdefault user\fR\&\&.
.RE
.LP
.B
handle_pdu(TargetName, ReqId, SnmpPduInfo, UserData) -> Reply
.br
.RS
.LP
Types:

.RS 3
TargetName = target_name()
.br
ReqId = term()
.br
SnmpPduInfo = {ErrorStatus, ErrorIndex, Varbinds}
.br
ErrorStatus = atom()
.br
ErrorIndex = integer()
.br
Varbinds = [varbind()]
.br
varbind() = #varbind
.br
UserData = term()
.br
Reply = ignore
.br
.RE
.RE
.RS
.LP
Handle the reply to an asynchronous request, such as \fBasync_get\fR\&, \fBasync_get_next\fR\& or \fBasync_set\fR\&\&.
.LP
It could also be a late reply to a synchronous request\&.
.LP
\fIReqId\fR\& is returned by the asynchronous request function\&.
.RE
.LP
.B
handle_trap(TargetName, SnmpTrapInfo, UserData) -> Reply
.br
.RS
.LP
Types:

.RS 3
TargetName = TargetName2 = target_name()
.br
SnmpTrapInfo = {Enteprise, Generic, Spec, Timestamp, Varbinds} | {ErrorStatus, ErrorIndex, Varbinds}
.br
Enterprise = oid()
.br
Generic = integer()
.br
Spec = integer()
.br
Timestamp = integer()
.br
ErrorStatus = atom()
.br
ErrorIndex = integer()
.br
Varbinds = [varbind()]
.br
varbind() = #varbind
.br
UserData = term()
.br
Reply = ignore | unregister | {register, UserId, TargetName2, agent_info()}
.br
UserId = term()
.br
agent_info() = [{agent_info_item(), agent_info_value()}]
.br
.RE
.RE
.RS
.LP
Handle a trap/notification message from an agent\&.
.LP
For more info about the \fIagent_info()\fR\&, see \fBregister_agent\fR\&
.LP
The only user which would return \fI{register, UserId, TargetName2, agent_info()}\fR\& is the \fIdefault user\fR\&\&.
.RE
.LP
.B
handle_inform(TargetName, SnmpInformInfo, UserData) -> Reply
.br
.RS
.LP
Types:

.RS 3
TargetName = TargetName2 = target_name()
.br
SnmpInformInfo = {ErrorStatus, ErrorIndex, Varbinds}
.br
ErrorStatus = atom()
.br
ErrorIndex = integer()
.br
Varbinds = [varbind()]
.br
varbind() = #varbind
.br
UserData = term()
.br
Reply = ignore | unregister | {register, UserId, TargetName2, agent_info()}
.br
UserId = term()
.br
agent_info() = [{agent_info_item(), agent_info_value()}]
.br
.RE
.RE
.RS
.LP
Handle a inform message\&.
.LP
For more info about the \fIagent_info()\fR\&, see \fBregister_agent\fR\&
.LP
The only user which would return \fI{register, UserId, TargetName2, agent_info()}\fR\& is the \fIdefault user\fR\&\&.
.LP
If the \fBinform request behaviour\fR\& configuration option is set to \fIuser\fR\& or \fI{user, integer()}\fR\&, the response (acknowledgment) to this inform-request will be sent when this function returns\&.
.RE
.LP
.B
handle_report(TargetName, SnmpReportInfo, UserData) -> Reply
.br
.RS
.LP
Types:

.RS 3
TargetName = TargetName2 = target_name()
.br
Addr = ip_address()
.br
Port = integer()
.br
SnmpReportInfo = {ErrorStatus, ErrorIndex, Varbinds}
.br
ErrorStatus = atom()
.br
ErrorIndex = integer()
.br
Varbinds = [varbind()]
.br
varbind() = #varbind
.br
UserData = term()
.br
Reply = ignore | unregister | {register, UserId, TargetName2, agent_info()}
.br
UserId = term()
.br
agent_info() = [{agent_info_item(), agent_info_value()}]
.br
.RE
.RE
.RS
.LP
Handle a report message\&.
.LP
For more info about the \fIagent_info()\fR\&, see \fBregister_agent\fR\&
.LP
The only user which would return \fI{register, UserId, TargetName2, agent_info()}\fR\& is the \fIdefault user\fR\&\&.
.RE