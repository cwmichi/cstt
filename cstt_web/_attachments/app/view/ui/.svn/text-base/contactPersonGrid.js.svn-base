/*
 * File: app/view/ui/contactPersonGrid.js
 *
 * This file was generated by Sencha Designer version 2.0.0.
 * http://www.sencha.com/products/designer/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Designer does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('cstt.view.ui.contactPersonGrid', {
    extend: 'Ext.grid.Panel',

    height: 500,
    autoScroll: true,
    title: 'Kontaktpersonen',
    store: 'contactGridStore',
    overflow: 'auto',
    couchDBDocID: 'null',
    defaultStatusText: 'Kein Suchergebnis',
    anchor: '100%',
    forceFit: true,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            columns: [
                {
                    xtype: 'gridcolumn',
                    hidden: true,
                    dataIndex: '_id',
                    text: '_id'
                },
                {
                    xtype: 'gridcolumn',
                    hidden: true,
                    dataIndex: 'salutation',
                    text: 'salutation'
                },
                {
                    xtype: 'gridcolumn',
                    width: 220,
                    dataIndex: 'companyConvert',
                    text: 'Firma'
                },
                {
                    xtype: 'gridcolumn',
                    width: 150,
                    dataIndex: 'contactNameConvert',
                    text: 'Name'
                },
                {
                    xtype: 'gridcolumn',
                    width: 100,
                    dataIndex: 'language',
                    text: 'Sprache'
                },
                {
                    xtype: 'gridcolumn',
                    width: 230,
                    dataIndex: 'email',
                    renderer: renderEmail,
                    text: 'E-Mail'
                },
                {
                    xtype: 'gridcolumn',
                    width: 150,
                    dataIndex: 'phone',
                    text: 'Telefon'
                },
                {
                    xtype: 'gridcolumn',
                    width: 150,
                    dataIndex: 'fax',
                    text: 'Telefax'
                },
                {
                    xtype: 'gridcolumn',
                    width: 150,
                    dataIndex: 'mobile',
                    text: 'Mobil'
                },
                {
                    xtype: 'gridcolumn',
                    width: 150,
                    dataIndex: 'position',
                    text: 'Position/Rolle'
                },
                {
                    xtype: 'actioncolumn',
                    hideable: false,
                    width: 25,
                    menuText: '<i>Aktionen</i>',
                    items: [
                        {
                        	icon: 'images/icons/database_edit.png',
                        	tooltip: 'Kontaktperson editieren ... ',
                        	scope: this,
                        	handler: this.onEditClick
                        }
                    ]
                },
                {
                    xtype: 'actioncolumn',
                    hideable: false,
                    width: 25,
                    menuText: '<i>Kontaktperson</i>',
                    items: [{
            		icon: 'images/icons/user_green.png',
            		tooltip: 'Kontaktperson aktivieren ...',
            		scope: this,
            		handler: function(view, rowIndex, colIndey, item, e, record) {
            				var record = view.store.getAt(rowIndex),
            					disabled = false;
            				this.processDisabled(disabled, record);	
            				
	            		}
	            	},
	            	{
	            		icon: 'images/icons/user_red.png',
	            		tooltip: 'Kontaktperson deaktivieren ...',
	            		scope: this,
	            		handler: function(view, rowIndex, colIndex, item, e, record) {
	            			var record = view.store.getAt(rowIndex),
            					disabled = true;
            				this.processDisabled(disabled, record);	
	            		}
	            	}],
	            	renderer: function(value, meta, record) {
		            	disabled = record.get('disabled');
		            	if(disabled === false) {
	            			// Icons verstecken bzw. anzeigen
		            		this.items[0].iconCls = 'x-hidden';
		            		this.items[1].iconCls = '';
		            	} else {
		            		this.items[0].iconCls = '';
		            		this.items[1].iconCls = 'x-hidden';
		            	}
		            }
                }
            ],
            viewConfig: {
                emptyText: 'Keine Kontaktpersonen vorhanden ...',
                loadingText: 'Lade Kontaktpersonen ...',
                 getRowClass: function(record, index) {
		            var disabled = record.get('disabled');
		            if (disabled) {
		                return 'cstt_contact_disabled';
		            }
		        }
            },
            dockedItems: [
                {
                    xtype: 'toolbar',
                    itemId: 'topToolbar',
                    dock: 'top',
                    ui: 'footer',
                    items: [
                        {
                            xtype: 'button',
                            itemId: 'refresh',
                            iconCls: 'x-tbar-loading',
                            text: 'Aktualisieren',
                            tooltip: 'Aktualisieren ...',
                            listeners: {
                                click: {
                                    fn: me.onRefreshClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'tbseparator'
                        },
                        {
                            xtype: 'textfield',
                            width: 200,
                            name: 'searchField',
                            fieldLabel: 'Suche',
                            labelWidth: 50,
                            listeners: {
                                change: {
                                    fn: me.onTextfieldChange,
                                    buffer: 100,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            text: '<',
                            tooltip: 'Vorheriges Suchergebnis',
                            listeners: {
                                click: {
                                    fn: me.onPreviousClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            text: '>',
                            tooltip: 'NÃ¤chstes Suchergebnis',
                            listeners: {
                                click: {
                                    fn: me.onNextClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'tbseparator'
                        },
                        {
                            xtype: 'button',
                            itemId: 'addContactButton',
                            iconCls: 'user_add',
                            text: 'Neue Kontaktperson anlegen',
                            tooltip: 'Neue Kontaktperson anlegen ...',
                            listeners: {
                                click: {
                                    fn: me.onAddClick,
                                    scope: me
                                }
                            }
                        }/*,
                        {
                            xtype: 'tbseparator'
                        },
                        {
                            xtype: 'button',
                            itemId: 'editContactButton',
                            iconCls: 'database_edit',
                            text: 'Kontaktperson editieren',
                            tooltip: 'Editiert die Kontaktperson ...',
                            listeners: {
                                click: {
                                    fn: me.onEditClick,
                                    scope: me
                                }
                            }
                        }*/
                    ]
                }
            ],
            listeners: {
                beforerender: {
                    fn: me.onGridpanelBeforeRender,
                    scope: me
                }
            }
        });

        me.callParent(arguments);
    },
    
    	// afterRender override: it adds textfield and statusbar reference and start monitoring keydown events in textfield input 
    afterRender: function() {
        var me = this;
        me.callParent(arguments);
        me.textField = me.down('textfield[name=searchField]');
        me.statusBar = me.down('#searchStatusBar');
    },
	// detects html tag
    tagsRe: /<[^>]*>/gm,
    
    // DEL ASCII code
    tagsProtect: '\x0f',
    
    // detects regexp reserved word
    regExpProtect: /\\|\/|\+|\\|\.|\[|\]|\{|\}|\?|\$|\*|\^|\|/gm,
    

    onRefreshClick: function(button, e, options) {
    },

    onTextfieldChange: function(field, newValue, oldValue, options) {
    },

    onPreviousClick: function(button, e, options) {
    },

    onNextClick: function(button, e, options) {
    },

    onAddClick: function(button, e, options) {
    },

    onEditClick: function(button, e, options) {
    },

    onGridpanelBeforeRender: function(abstractcomponent, options) {
    },
    
    processDisabled: function(disabled, record) {
    	
    }

});