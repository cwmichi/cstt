/*
 * File: app/view/csttViewport.js
 *
 * This file was generated by Sencha Designer version 2.0.0.
 * http://www.sencha.com/products/designer/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Designer does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

Ext.define('cstt.view.csttViewport', {
    extend: 'cstt.view.ui.csttViewport',

    initComponent: function() {
	var me = this;
	/*
	var loginStatus = Ext.util.Cookies.get("CSTTLogin2013");
	var loginWindow = Ext.widget('loginWindow');

	if (!Ext.isEmpty(loginStatus)) {
	    	
	   var uArr = loginStatus.split('@') ;	
	   
	   var verifyCheck = uArr[0];
	   var username = uArr[1];
	   var md5Password = uArr[2];
	    	
	   
	   var michiCSTT = '27041989CSTT2013';
	   var c1 = md5Password+michiCSTT+username;
	   var ckVerifyCheck = Ext.util.csttMD5(c1);                 
		
		if (ckVerifyCheck == verifyCheck) {
        	
        loginWindow.down('#username').setValue(username);
        loginWindow.down('#password').setValue(md5Password);
        loginWindow.add({
        	xtype: 'hiddenfield',
        	value: md5Password,
        	itemId: 'md5hiddenPass'
        });
        loginWindow.onLoginClick();
		} else {
			Ext.util.Cookies.clear("CSTTLogin2013");
		}
        }
        */
        
        
        
        me.callParent(arguments);
    },
    
    ticketPanelCheckChanges: function(docID) {
    	var centerPanel = Ext.getCmp('viewport').getComponent('centerTabPanel');

	     if (centerPanel.getComponent(docID)) {
	     
	     		centerPanel.getComponent(docID).down('#'+docID).updateContent();
	     }
    },
    
    customerChangesCouchDB: function(json, lengthRev) {
    	
	   if (lengthRev == 1) {
	   	
	   		Ext.data.StoreManager.lookup('companyComboBoxStore').load();
			Ext.data.StoreManager.lookup('companyConvertStore').load();
	   		Ext.example.msg('Neuer Kunde angelegt', 'Name des Kunden: '+ json.company);	
	   } else {
	   
	   		Ext.data.StoreManager.lookup('companyComboBoxStore').load();
	   		Ext.data.StoreManager.lookup('companyConvertStore').load();
	   		Ext.example.msg('Kunde bearbeitet', 'Name des Kunden: '+ json.company);	
	   
	   }

    },
    
    
    // CouchDB _changes für Ticket
    ticketChangesCouchDB: function(json, lengthRev) {
    	
	   if (lengthRev == 1) {
	   	
	   		Ext.data.StoreManager.lookup('ticketCurrentStore').load();
	    	Ext.data.StoreManager.lookup('ticket24HoursStore').load();
	    	
	   		Ext.example.msg('Neues Ticket', 'Neues Ticket mit Typ: '+ json.ticket_type + ' - '+json.title);	
	   }

    },
    
    // CouchDB _changes für Aktionen/Kommentare
    actionChangesCouchDB: function(json, lengthRev) {
    	
    	if (lengthRev == 1) {
    		
    		// DocID des Tickets
    		var ticket_ID = json.ticket_ID;
    		
    		// Hole Ticket
    		Ext.Ajax.request({
			        method: 'GET',
			        url: '../../'+ticket_ID,
			        // Header auf application/json setzen - CouchDB
			        headers: {
			            'Content-Type': 'application/json; charset=utf-8'
			        },
			        scope: this,
			        success: function (result, request ) {	
			        	// Get JSON 
			            var json2 = Ext.JSON.decode(result.responseText);
			            
			            Ext.data.StoreManager.lookup('ticketCurrentStore').load();
		    			Ext.data.StoreManager.lookup('ticket24HoursStore').load();
		    			
		    			this.ticketPanelCheckChanges(ticket_ID);
		    						
			            if (json.status !== '') {
				            // Status-Text ermitteln
				    		var statusInt = parseInt(json.status);
							var statusText = switchStatusText(statusInt);
				            Ext.example.msg('Neue Aktion ausgef&uuml;hrt', 'Ticket-Nr.: '+ json2.ticketNumber + ' - '+statusText);
				            
				       
				            
				            
				            
			            } else {
			            	Ext.example.msg('Kommentar wurde erstellt', 'Ticket-Nr.: '+ json2.ticketNumber + ' - '+json2.title);
			            }
			            
			            
			            
			            
			           

			        }
			    });
			    
			    
			    
    	
	    	
				            	
			
			            	
    	}
    
    },
    
    // Hole DocID für CouchDB _changes
    getDocIDChanges: function(docID) {
    	Ext.Ajax.request({
			        method: 'GET',
			        url: '../../'+docID+'?revs_info=true',
			        // Header auf application/json setzen - CouchDB
			        headers: {
			            'Content-Type': 'application/json; charset=utf-8'
			        },
			        scope: this,
			        success: function (result, request ) {	
			        	// Get JSON 
			            var json = Ext.JSON.decode(result.responseText);
			            var lengthRev = json._revs_info.length;
			            
			            
			            	switch(json.type) {
		      					// Ticket
				            	case 'ticket':
				            	
				            		this.ticketChangesCouchDB(json, lengthRev);
				            	
				            	break;
				            	// Aktionen / Kommentare
				            	case 'ticket_comment':
				            	
				            		this.actionChangesCouchDB(json, lengthRev);
		
				            	break;
				            	// Kontaktpersonen
				            	case 'contact':
				            	
				            	break;
				        
			            		// Kunden
				            	case 'customer':
				            	
				            		this.customerChangesCouchDB(json, lengthRev);

				            	break;	
			            	}
			           

			        }
			    });

    },
    
    // Hole CouchDB _changes
    couchDBChanges: function(last_seq)  {
    	var changesURL = '';
    	
    	if(last_seq == "now") {
    		changesURL = '&since=now';
    	} else if (last_seq > 0) {
			changesURL = '&since='+last_seq;
		}
    
		$.ajax({
		  type: "GET",
		  url: '../../_changes?feed=longpoll&heartbeat=10000'+changesURL,
		  dataType: 'json',
		  cache: false, 
		  scope: this,
		  success: function(json) {
		  	
		  	// last_seq muss groesser als 0 sein, wegen 1. Kontaktaufnahme mit Server
		    if (last_seq > 0) {
				
		    	// Änderungen müssen vorhanden sein!
				if (json.results.length > 0) {
												
					for (var i = 0; i < json.results.length; i++ ) {
						
						// Design Dokument wurde nicht vom CSTT verändert
						if (json.results[i].id !== '_design/cstt') {

							// Dokument in CouchDB wurde nicht gelöscht
							if (json.results[i].deleted !== true || json.results[i].deleted == undefined) {
								// Zeige die CouchDB Changes an
								Ext.getCmp('viewport').getDocIDChanges(json.results[i].id); 
							} else {
							
								Ext.example.msg('Datensatz gel&ouml;scht', 'Datensatz in Datenbank gel&ouml;scht');
							}
						} else {
						
						
						
											function actionConfirm(btn){
					                if (btn == 'yes') {						
					                  window.location = 'index.html';
					                }
					            }	
					
					            
					            
					            
							  	Ext.MessageBox.show({
							  		 title:'Neue Version verf&uuml;gbar ...',
					           msg: 'M&ouml;chten Sie die Weboberfl&auml;che aktualisieren?',
					           buttons: Ext.MessageBox.YESNO,
					           fn: actionConfirm,
					           icon: Ext.MessageBox.QUESTION
							  	});
						
						
						
						
						}
					}
											
				}
									
		   }
			
		    // re-run to fetch CouchDB query!!!
		 	Ext.getCmp('viewport').couchDBChanges(json.last_seq);
		   
		  }, 
		  error: function(jqXHR, textStatus, errorThrown) {

			if(errorThrown == "Unauthorized") {
				
				return true;
			}
			
			if(textStatus == "OK") {
				Ext.getCmp('viewport').couchDBChanges(last_seq);
				return true;
			}
			
		  	if (textStatus == "parsererror" || textStatus == 'error') {
		  		
		  		function actionConfirm(btn){
                if (btn == 'yes') {						
                   Ext.getCmp('viewport').couchDBChanges(last_seq);
                }
            }	

            
            
            
		  	Ext.MessageBox.show({
		  		 title:'Datenbank nicht erreichbar ...',
           msg: 'M&ouml;chten Sie die Verbindung zur Datenbank wiederherstellen?',
           buttons: Ext.MessageBox.YESNO,
           fn: actionConfirm,
           icon: Ext.MessageBox.QUESTION
		  	});
		  	
		  		
		  	}
		  	
		  	
		  	
		  	
		  	
		  }
		});


    },
    
    

    onNewTicketbuttonClick: function(button, e, options) {
        this.pressNewTicket();
    },
    
    onCurrentTicketsTabActive: function(abstractcomponent, options) {
    	
    	
    	
    	// Fixed Bug: Scrollbar verschwinden, wenn ein anderer Tab im Panel geöffnet ist und der Store wird für das currentTicketGrid aktualisert.
       // abstractcomponent.doLayout();
        // console.log(abstractcomponent);
        // console zeigt currentTicketsTab
        // CurrentTicketsGrid über ItemID ansprechen:
      //  abstractcomponent.down('#currentTicketsGrid').doLayout();
      //  abstractcomponent.down('#currentTicketsGrid').getView().refresh();
        
        
    },

    onPressSearch: function(button, e, options) {
    	// Suchformular anzeigen
    	Ext.widget('searchWindow');
    },

    onStatusBarPanelAfterRender: function(abstractcomponent, options) {
       /* abstractcomponent.addDocked({
            dock: 'top',
            xtype: 'toolbar',
            defaultText: 'Fertig',
            id: 'statusBar',
            // defaultIconCls: 'house',

            // values to set initially:
            text: 'Fertig ...',
            //iconCls: 'accept',
			ui: 'footer',
            // any standard Toolbar items:
            items: [{
                text: 'Version ' + programVersion,
                handler: function () {
                    Ext.MessageBox.show({
                        title: 'Version ' + programVersion,
                        msg: '<b>Customer Support Ticket Tool (CSTT) - <a href="pdf/changelog.pdf" target="_blank">Changelog</a></b><br /><br />Version: ' + programVersion + ' vom ' + releaseDate + '<br /><br /><a href="mailto:michael.scharrer@cordaware.com?subject=Customer%20Support%20Ticket%20Tool">Kontakt</a>',
                        buttons: Ext.MessageBox.OK,
                        icon: Ext.MessageBox.INFO
                    });

                }

            }
            ] 
        });*/
    },

    pressHomeButton: function(button, e, options) {
        this.getComponent('centerTabPanel').setActiveTab('currentTicketsTab');
        Ext.data.StoreManager.lookup('ticketCurrentStore').load();
    },

    pressNewTicket: function(item, e, options) {
        var itemId = 'newTicketFormTab';    

        if(!this.getComponent('centerTabPanel').getComponent(itemId))
        {
            this.getComponent('centerTabPanel').add({
                title: 'Neues Ticket',
                tabConfig: {           
                    tooltip: 'Neues Ticket'
                },
                items: {
                    xtype: 'newTicketForm'
                },	
                layout: {
                	type: 'fit'
                },
                itemId: itemId,
                autoScroll: true,
                overflow: 'auto',
                closable: true
            }).show();
        } else {
            this.getComponent('centerTabPanel').setActiveTab(itemId);
        }
    },

    pressSupportTicket: function(item, e, options) {
        this.getComponent('centerTabPanel').setActiveTab('currentTicketsTab');
        Ext.data.StoreManager.lookup('ticketCurrentStore').load();
    },
    
    pressTicketHistoryAKM: function(item, e, options) {
    	var store = new cstt.store.ticketHistoryStore;
    	
    	var store = Ext.create('cstt.store.ticketHistoryStore', {
    	storeId: 'ticketHistoryStoreAKM',
        listeners: {
            beforeload: function(store, operation, options){
	               	store.getProxy().limitParam = 'limit';
			        store.getProxy().startParam = 'skip';
			        store.getProxy().extraParams = '';
			        store.getProxy().api.read = '_view/ticketHistoryAKM?include_docs=true&descending=false';
	            }
	        }
	    });
    
    
    	var itemId = 'ticketHistoryTabAKM';
    	var title = 'Ticket Historie (AKM)';
    	
    	this.loadTicketHistory(store, itemId, title);
    },
    
    pressTicketHistoryASM: function(item, e, options) {
    	var store = Ext.create('cstt.store.ticketHistoryStore', {
    		storeId: 'ticketHistoryStoreASM',
        listeners: {
            beforeload: function(store, operation, options){
	               	store.getProxy().limitParam = 'limit';
			        store.getProxy().startParam = 'skip';
			        store.getProxy().extraParams = '';
			        store.getProxy().api.read = '_view/ticketHistoryASM?include_docs=true&descending=false';
	            }
	        }
	    });
    	var itemId = 'ticketHistoryTabASM';
    	var title = 'Ticket Historie (ASM)';
    	
    	this.loadTicketHistory(store, itemId, title);
    },
    
    pressTicketHistoryJavaclient: function(item, e, options) {
    	var store = Ext.create('cstt.store.ticketHistoryStore', {
    		storeId: 'ticketHistoryStoreJavaclient',
        listeners: {
            beforeload: function(store, operation, options){
	               	store.getProxy().limitParam = 'limit';
			        store.getProxy().startParam = 'skip';
			        store.getProxy().extraParams = '';
			        store.getProxy().api.read = '_view/ticketHistoryJAVA?include_docs=true&descending=false';
	            }
	        }
	    });
    	var itemId = 'ticketHistoryTabJavaclient';
    	var title = 'Ticket Historie (Javaclient)';
    	
    	this.loadTicketHistory(store, itemId, title);
    },


    pressTicketHistory: function(item, e, options) {
    	
    	var store = Ext.getStore('ticketHistoryStore');
    	var itemId = 'ticketHistoryTab';
    	var title = 'Ticket Historie';
    	
    	this.loadTicketHistory(store, itemId, title);
    	
       
    },
    
    
    loadTicketHistory: function(store, itemId, title) {
    	
        if(!this.getComponent('centerTabPanel').getComponent(itemId))
        {
            this.getComponent('centerTabPanel').add({
                title: title,
                tabConfig: {           
                    tooltip: title
                },
                autoScroll: true,
                overflow: 'auto',
                items: [
                {
                    xtype: 'allTicketsGrid',
                    title: title,
                    collapsible: true,
                    itemId: 'HistoryTicketsGrid',
                    store: store,
                    listeners: {
                        itemclick: {            
                            scope: this,
                            fn: function(view, record, cellIndex, row, htmlCell, rowIndex){

                                var actionsGrid =  Ext.getCmp('centerTabPanel').getComponent(itemId).down('#ticketHistoryActionsGrid');

                                actionsGrid.couchDBDocID = record.get('_id');
                                actionsGrid.setTitle('Aktionen zu Ticket: '+record.get('title'));
                                actionsGrid.getStore().load({
                                    params: {
                                        "key": '"'+record.get('_id')+'"'
                                    }
                                });

                                // console.log(actionsGrid);
                                var descriptionPanel = Ext.getCmp('centerTabPanel').getComponent(itemId).down('#descriptionToTicketHistory');
                                descriptionPanel.setTitle('Beschreibung zu Ticket: '+record.get('title'));
                                descriptionPanel.update(record.get('description'));

                            }
                        }

                    }
                },{
                    xtype: 'actionCommentGrid',
                    anchor: '100%',
                    itemId: 'ticketHistoryActionsGrid',
                    collapsible: true,
                    store: new cstt.store.actionstoTicketHistory,
                    height: 250
                },{
                    xtype: 'descriptionToCurrentTicket',
                    anchor: '100%',
                    collapsible: true,
                    itemId: 'descriptionToTicketHistory',
                    height: 250
                }],	
                itemId: itemId,
                layout: 'anchor',
                closable: true
            }).show();

            this.getComponent('centerTabPanel').getComponent(itemId).getComponent('HistoryTicketsGrid').addDocked({
                xtype: 'pagingtoolbar',
                store: store,   
                dock: 'bottom',
                emptyMsg: 'Keine Tickets vorhanden',
                displayMsg: 'Anzeige der Tickets {0} - {1} von {2}',
                displayInfo: true
            });
            this.getComponent('centerTabPanel').getComponent(itemId).getComponent('HistoryTicketsGrid').setHeight(340);

        } else {
            this.getComponent('centerTabPanel').setActiveTab(itemId);
        }
      
        store.load();
    },

    pressProjectStatusOverview: function(item, e, options) {
        // Projektstatus Uebersicht
        var itemId = 'ticketProjectTab';

        if(!this.getComponent('centerTabPanel').getComponent(itemId))
        {
            this.getComponent('centerTabPanel').add({
                title: 'Projektstatus',
                tabConfig: {           
                    tooltip: 'Projektstatus'
                },
                layout: {
                    type: 'fit'
                },
                items: {
                    xtype: 'allTicketsGrid',
                    anchor: '100%',
                    store: 'ticketProjectStore',
                    title: 'Projektstatus',
                    itemId: 'projectTicketGrid'
                },	
                itemId: itemId,
                closable: true,
                autoScroll: true,
                overflow: 'auto'       
            }).show();
        } else {
            this.getComponent('centerTabPanel').setActiveTab(itemId);
        }
        this.getComponent('centerTabPanel').getComponent(itemId).getComponent('projectTicketGrid').setHeight(500);
        // Store fuer Ticket Projektstatus laden
        Ext.data.StoreManager.lookup('ticketProjectStore').load();
    },
    
        pressShowKB: function(item, e, options) {
        // Projektstatus Uebersicht
        var itemId = 'kbArticleTab';

        if(!this.getComponent('centerTabPanel').getComponent(itemId))
        {
            this.getComponent('centerTabPanel').add({
                title: 'KB-Artikel',
                tabConfig: {           
                    tooltip: 'KB-Artikel'
                },
                layout: {
                    type: 'fit'
                },
                items: {
                   xtype: 'kbArticleGrid'
                },	
                itemId: itemId,
                closable: true,
                autoScroll: true,
                overflow: 'auto'       
            }).show();
        } else {
            this.getComponent('centerTabPanel').setActiveTab(itemId);
        }

        Ext.data.StoreManager.lookup('kbStore').load();
    },
    
    pressDeferredTickets: function(item, e, options) {
        // Zurückgestellte Tickets - Uebersicht
        var itemId = 'ticketDeferredTab';

        if(!this.getComponent('centerTabPanel').getComponent(itemId))
        {
            this.getComponent('centerTabPanel').add({
                title: 'Zur&uuml;ckgestellte Tickets',
                tabConfig: {           
                    tooltip: 'Zur&uuml;ckgestellte Tickets'
                },
                layout: {
                    type: 'fit'
                },
                items: {
                    xtype: 'allTicketsGrid',
                    anchor: '100%',
                    store: 'ticketDeferredStore',
                    title: 'Zur&uuml;ckgestellte Tickets',
                    itemId: 'deferredTicketGrid'
                },	
                itemId: itemId,
                closable: true,
                autoScroll: true,
                overflow: 'auto'       
            }).show();
        } else {
            this.getComponent('centerTabPanel').setActiveTab(itemId);
        }
        this.getComponent('centerTabPanel').getComponent(itemId).getComponent('deferredTicketGrid').setHeight(600);
        // Store fuer zurueckgestellte Tickets laden
        Ext.data.StoreManager.lookup('ticketDeferredStore').load();
        
    },
	
    // Ticket Statistik als Tortendiagramm
	pressTicketStatistic: function(item, e, options) {
		var itemId = 'ticketStatisticTab';

        if(!this.getComponent('centerTabPanel').getComponent(itemId))
        {
            this.getComponent('centerTabPanel').add({
                title: 'Statistik',
                tabConfig: {           
                    tooltip: 'Statistik'
                },
                layout: {
                        type: 'fit'
                },
                items: [{
                    xtype: 'panel',
                    height: 250,
                    width: 400,
                    layout: {
                        type: 'anchor'
                    },
                    autoScroll: true,
                    title: 'Statistik',
                    dockedItems: [
                        {
                            xtype: 'toolbar',
                            dock: 'top',
                            ui: 'footer',
                            items: [
                                {
                                    xtype: 'yearComboBox',
                                    width: 320,
							            listeners: {
							                change: {
							                    fn: function(field, newValue, oldValue, options) {
													
							                    	if(typeof newValue != 'number') {
							                    		newValue = '"'+newValue+'"';
							                    	}
							                    	Ext.data.StoreManager.lookup('chartTicketStore').load({params: {
															"startkey": '['+newValue+']',
															"endkey": '['+newValue+',{},{}]'
														}});
														
														Ext.getStore('yearStore').load();
																                    	
    											}
							                },
							                afterrender:  function(abstractcomponent, options) {
												var date = new Date(),
												year = date.getFullYear();
												
												abstractcomponent.setValue(year);
										
										    }
							            }
     
                                },{
                                	xtype: 'tbseparator'
                                },{
                                	xtype: 'saveChartButton'
                                }
                            ]
                        }
                    ],
                    items: [
                        {
                            xtype: 'ticketPieChart'
                        }
                    ]
                }],
                itemId: itemId,
                closable: true,
                autoScroll: true,
                overflow: 'auto'       
            }).show();
        } else {
            this.getComponent('centerTabPanel').setActiveTab(itemId);
        }

		
    },
    
    pressStaffTicketStatistic: function(item, e, options) {
    	
    	
    	var itemId = 'ticketStaffStatisticTab';

        if(!this.getComponent('centerTabPanel').getComponent(itemId))
        {
            this.getComponent('centerTabPanel').add({
                title: 'Statistik (Mitarbeiter)',
                tabConfig: {           
                    tooltip: 'Statistik (Mitarbeiter)'
                },
                layout: {
                        type: 'fit'
                },
				 items: [{
                    xtype: 'panel',
                    height: 250,
                    width: 400,
                    layout: {
                        type: 'anchor'
                    },
                    autoScroll: true,
                    title: 'Statistik (Mitarbeiter)',
                    dockedItems: [
                        {
                            xtype: 'toolbar',
                            dock: 'top',
                            ui: 'footer',
                            items: [
                                {
                                    xtype: 'yearComboBox',
                                    width: 320,
                                     listeners: {
							                change: {
							                    fn: function(field, newValue, oldValue, options) {
							                    	
							                    	if(typeof newValue != 'number') {
							                    		newValue = '"'+newValue+'"';
							                    	}
							                    	Ext.data.StoreManager.lookup('staffTicketChartStore').load({params: {
															"startkey": '['+newValue+']',
															"endkey": '['+newValue+',{}]'
														}});
														
														Ext.getStore('yearStore').load();
																                    	
    											}
							                },
							                afterrender:  function(abstractcomponent, options) {
												var date = new Date(),
												year = date.getFullYear();
												
												abstractcomponent.setValue(year);
										
										    }
							            }
                                },{
                                	xtype: 'tbseparator'
                                },{
                                	xtype: 'saveChartButton'
                                }
                            ]
                        }
                    ],
                    items: [
                        {
                            xtype: 'staffTicketChart'
                        }
                    ]
                }],
                itemId: itemId,
                closable: true,
                autoScroll: true,
                overflow: 'auto'       
            }).show();
        } else {
            this.getComponent('centerTabPanel').setActiveTab(itemId);
        }
    	
    	
    },
    
    pressCustomerTicketStatistic: function(item, e, options) {
    	
    	var itemId = 'ticketCustomerStatisticTab';

        if(!this.getComponent('centerTabPanel').getComponent(itemId))
        {
            this.getComponent('centerTabPanel').add({
                title: 'Statistik (Kunden)',
                tabConfig: {           
                    tooltip: 'Statistik (Kunden)'
                },
                layout: {
                        type: 'fit'
                },
				 items: [{
                    xtype: 'panel',
                    autoScroll: true,
                    layout: {
                        type: 'fit'
                    },
                    title: 'Statistik (Kunden)',
                    dockedItems: [
                        {
                            xtype: 'toolbar',
                            dock: 'top',
                            ui: 'footer',
                            items: [
                                {
                                    xtype: 'yearComboBox',
                                    width: 320,
                                     listeners: {
							                change: {
							                    fn: function(field, newValue, oldValue, options) {
							                    	
							                    	if(typeof newValue != 'number') {
							                    		newValue = '"'+newValue+'"';
							                    	}
							                    	Ext.data.StoreManager.lookup('customerTicketChartStore').load({params: {
															"startkey": '['+newValue+']',
															"endkey": '['+newValue+',{}]'
														}});
														
														Ext.getStore('yearStore').load();
																                    	
    											}
							                },
							                afterrender:  function(abstractcomponent, options) {
												var date = new Date(),
												year = date.getFullYear();
												
												abstractcomponent.setValue(year);
										
										    }
							            }
                                }/*,{
                                	xtype: 'tbseparator'
                                },{
		                            xtype: 'numberfield',
		                            name: 'level',
		                            value: 10,
		                            fieldLabel: 'Schwellwert',
		                            allowDecimals: false,
		                            minValue: 0,
		                            listeners: {
		                                change: {
		                                    fn: function(field, newValue, oldValue, options) {
		                                    	
		                                    	if(!Ext.isEmpty(newValue)) {
		                                    		var toolbar = field.up('toolbar');
		                                    		var panel = toolbar.up('panel');
		                                    		var chart = panel.down('chart');
		                                    		console.log(chart.axes);
		                                    		chart.axes.items[1].minimum = newValue;
		                                    	}
		                                    	
		                                    }
		                                }
		                            }
		                        }*/,{
                                	xtype: 'tbseparator'
                                },{
		                                xtype: 'saveChartButton'
                                }
                            ]
                        }
                    ],
                    items: [
                        {
                            xtype: 'customerTicketChart'
                        }
                    ]
                }],
                itemId: itemId,
                closable: true,
                autoScroll: true,
                overflow: 'auto'       
            }).show();
        } else {
            this.getComponent('centerTabPanel').setActiveTab(itemId);
        }
    		
    	
    	
    	
    	
    	
    	
    	
    },
    
    
    pressCustomerOverview: function(item, e, options) {
        var itemId = 'customerGridTab';

        if(!this.getComponent('centerTabPanel').getComponent(itemId))
        {
            this.getComponent('centerTabPanel').add({
                title: 'Kundenübersicht',
                tabConfig: {           
                    tooltip: 'Kundenübersicht'
                },
                autoScroll: true,
                overflow: 'auto',
                layout: {
			        align: 'stretch',
			        type: 'vbox'
			    },
                items: [{
                    xtype: 'customerGrid',
                    anchor: '100%',
                    flex: 0.8,
                    listeners: {
                        itemclick: {
                            scope: this,
                            fn: function(view, record, cellIndex, row, htmlCell, rowIndex){

                                var tCustomerGrid = this.getComponent('centerTabPanel').getComponent(itemId).getComponent('ticketsToCustomerGrid');
                                
                                tCustomerGrid.couchDBDocID = record.get('_id');
                                // Title setzen
                                tCustomerGrid.setTitle('Übersicht der Tickets zu Kunde:&nbsp;'+record.get('company'));

                                tCustomerGrid.getStore().proxy.extraParams = { 
                                    key: '"'+record.get('_id')+'"'
                                };
                                var toolbar = tCustomerGrid.getDockedItems('toolbar[dock="top"]');
                                var txtCounter =  toolbar[0].down('#txtCounter');
                                
                                tCustomerGrid.getStore().load({
                                	callback: function() {
                                		txtCounter.setText('<b>Anzahl der Tickets: ' + tCustomerGrid.getStore().count()+'</b>');
                                		txtCounter.show();
                                	}
                                });
                        
                                
                                toolbar[0].down('#reloadButton').enable();
                                
                                
                                
                            }
                        }
                    }
                },{
                    xtype: 'allTicketsGrid',
                    anchor: '100%',
                    flex: 1,
                    itemId: 'ticketsToCustomerGrid',
                    store: 'ticketsToCustomerStore',	
                    selModel: Ext.create('Ext.selection.CheckboxModel', {

           					 }),
                    beforeRender: function() {	
                     
                     	this.setTitle('Übersicht der Tickets zu Kunde');
                     
						var toolbar = this.getDockedItems('toolbar[dock="top"]');
					
						 toolbar[0].down('#reloadButton').disable();
						 
						 toolbar[0].add([{
										xtype: 'tbseparator'
										},{
										xtype: 'button',
										iconCls: 'database_table',
										text: 'Export',
										tooltip: 'Exportiert Support-Tickets als E-Mail',
										listeners: {
											click: {
												fn: function() {
													var grid = Ext.getCmp('viewport').getComponent('centerTabPanel').getComponent(itemId).down('#ticketsToCustomerGrid');
														var selection = grid.getView().getSelectionModel().getSelection();
														
														if(selection.length > 0) {
															
																var win = Ext.widget('exportTickets');
														Ext.data.StoreManager.lookup('allStaffEmailStore').load();
														
															
															var arr = new Array();
															
															Ext.Array.each(selection, function(rec) {
														       arr.push(rec.data._id);
														    });
														    
															win.ticketArray = arr;
															win.customerDocID = grid.couchDBDocID;
														} else {
												    	 Ext.MessageBox.show({
												                title: 'Hinweis',
												                msg: 'Bitte wählen Sie Tickets zum Export aus!',
												                buttons: Ext.MessageBox.OK,
												                icon: Ext.MessageBox.INFO
												            });
												    	}
												}
											}
										}
									}]);
									
						if(isAdmin === true) {
							
							toolbar[0].add([{
										xtype: 'tbseparator'
										},
										{
										xtype: 'button',
										iconCls: 'database_link',
										text: 'Ticket/s umbuchen',
										tooltip: 'Umbuchung von Tickets zu einem anderen Kunden & Kontaktperson',
										listeners: {
											click: {
												fn: function() {
													var grid = Ext.getCmp('viewport').getComponent('centerTabPanel').getComponent(itemId).down('#ticketsToCustomerGrid');
														var selection = grid.getView().getSelectionModel().getSelection();
														
														if(selection.length > 0 & selection.length <= 10) {
															
																
														Ext.data.StoreManager.lookup('allStaffEmailStore').load();
														
															var win = Ext.widget('transferTickets');
															var arr = new Array();
															
															Ext.Array.each(selection, function(rec) {
														       arr.push(rec.data._id);
														    });
														    
															
														    win.ticketArray = arr;
														    
														    
														    
														    
														    
														} else if (selection.length >= 11) {
															
															Ext.MessageBox.show({
																title: 'Zu viele Tickets ausgewählt',
																msg: 'Es können max. 10 Tickets gleichzeitig umgebucht werden.',
																buttons: Ext.MessageBox.OK,
																icon: Ext.MessageBox.ERROR
															});	
															
														}
														
														else {
												    	 Ext.MessageBox.show({
												                title: 'Hinweis',
												                msg: 'Bitte wählen Sie Tickets zum transferieren aus!',
												                buttons: Ext.MessageBox.OK,
												                icon: Ext.MessageBox.INFO
												            });
												    	}
												}
											}
										}
									}]);
						}
									
									

						toolbar[0].add({
								xtype: 'tbfill'
								},{
								xtype: 'tbtext',
								itemId: 'txtCounter',
								text: '',
								hidden: true
							});

                    }	
                }],
                itemId: itemId,
                closable:true	
            }).show();
        } else {
            this.getComponent('centerTabPanel').setActiveTab(itemId);
        }
        // Store für die Kundenübersicht laden
        Ext.data.StoreManager.lookup('allCustomersStore').load();
    },

    pressNewCustomer: function(item, e, options) {
        if (isAdmin === true || isSales === true) {
            // Zeige das Formular an (Kunden)					
            var customerWindow = Ext.widget('createCustomerWindow');
        }
        else { boxErrorAccessDenied(); }
    },

    pressContactOverview: function(item, e, options) {
        var itemId = 'contactsGridTab';

        if(!this.getComponent('centerTabPanel').getComponent(itemId))
        {
            this.getComponent('centerTabPanel').add({
                title: 'Kontaktpersonen',
                tabConfig: {           
                    tooltip: 'Kontaktpersonen'
                },
                layout: {
                    type: 'fit'
                },
                items: {
                    xtype: 'contactPersonGrid',
                    anchor: '100%'
                },	
                itemId: itemId,
                closable: true,
                overflow: 'auto',
                autoScroll: true
            }).show();
        } else {
            this.getComponent('centerTabPanel').setActiveTab(itemId);
        }

        // Store fuer Kontaktpersonen laden
        Ext.data.StoreManager.lookup('contactGridStore').load();
    },

    pressNewContact: function(item, e, options) {
        // Fenster / Formular zum Anlegen einer neuen Kontaktperson anzeigen
        Ext.widget('createContactWindow');
    },

    onLogoutClick: function(button, e, options) {
        // Bestätigung vom Benutzer
        Ext.MessageBox.confirm('Abmelden','Möchten Sie sich wirklich abmelden?', btnLogout);
        // Bei Klick auf ja -> Benutzer abmelden
        function btnLogout(btn){
            if (btn=='yes') {
            	// Cookie löschen - AuthSession
            	
            	var a = function(k, e) {
            	cstt.app.fireEvent("logout");
				 window.location = 'index.html';
        	};
        
        var j = function (k, e) {
        
        	Ext.MessageBox.show({
                            title: 'Fehler',
                            msg: k.responseText,
                            buttons: Ext.MessageBox.OK,
                            scope: this,
                            closable: true,
                            modal: true,
                            icon: Ext.MessageBox.ERROR
                        });	
        };
        

        // Couch Post zu _session
        Ext.Ajax.request({
            url: "/_session",
            method: 'DELETE',
            success: a,
            failure: j
        });
            	

            }
        }
    },
    
    showHistoryVersionToCustomer: function(customerDocID, customerName) {
		
		
		var window = Ext.create('Ext.window.Window',{
			autoShow: true,	
	layout: 'fit',
	title: 'Versions&uuml;bersicht zu Kunde: '+customerName,
	width: 520,
	height: 300,
	buttonAlign: 'left',
	resizable: false,	
	items: [{
		xtype: 'versionCustomerGrid',
		title: '',
		itemId: 'versionToCustomerGrid',
		couchDBDocID: customerDocID,
		scope: this,
		store: new Ext.data.Store({
			model: 'cstt.model.versionToCustomerModel',
			   sorters: [
                {
                    property: 'patchDate',
                    direction: 'DESC'
                }
            ]		
		 })
		}]
		});
		
		window.down('#versionToCustomerGrid').onRefreshClick();
		window.down('#versionToCustomerGrid').getView().refresh();
	
	},
    doCSTTLayout: function() {
 		
        var showMessageTicketCount = 0;	

        // Ueberpruefe die gesamte Anzahl aller Support Tickets
        var taskCountTickets = {
            run: function(){

                Ext.Ajax.request({
                    method: 'GET',
                    url: '_view/countAllTickets?group=true',
                    // Header auf application/json setzen - CouchDB
                    headers: {
                        'Content-Type': 'application/json; charset=utf-8'
                    },
                    scope: this,
                    success: function (result, request) {
                        var json = Ext.JSON.decode(result.responseText);

                        if (json.rows[0] !== undefined) {
                            var count = json.rows[0].value;

                            if (count == 777) {
                                if (showMessageTicketCount === 0) {
                                    Ext.MessageBox.show({
                                        title: 'Cooooool :-) !!!',
                                        msg: 'Schon 777 Support Tickets im CSTT, da gibt es wohl einen Grund zum Feiern ;-)',
                                        buttons: Ext.MessageBox.OK,
                                        icon: Ext.MessageBox.INFO
                                    });

                                }
                                showMessageTicketCount++;
                            }

                        }


                    }
                });


            },
            interval: 900000 //15 min oder 900000 ms
        };

        Ext.TaskManager.start(taskCountTickets);
        
        // Mitarbeiter Statistik für Admins
        if (isAdmin === true) {
        	Ext.getCmp('panelStatistics').down('#pressStaffTicketStatistic').show();                          
        }


        if (isAdmin === true || isSupport === true) {
			var pasus = Ext.getCmp('panelSettings').down('panelASSettings');
			if(!pasus) {
            Ext.getCmp('panelSettings').add({
                xtype: 'panel',
                id: 'panelASSettings',
                title: 'Allgemein',
                items: [{  
                    xtype: 'treepanel',
                    id: 'TreePanelVersion',
                    store: new Ext.data.TreeStore({
                        root: {
                            expanded: true, 
                            text: 'Versionsverwaltung',
                            children: [{
                                text: 'Versionen anzeigen',
                                id: 'showVersion',
                                leaf: true								
                            },{
                                text: 'Version hinzuf&uuml;gen',
                                id: 'createVersion',
                                leaf: true
                            }]
                        }
                    }),
                    listeners: {
                        itemclick: {
                            fn: function(view, record, item, index, e, obj){  

                                // console.log('record ID: ' + record.get('id'))
                                var clickId = record.get('id');

                                switch (clickId) {
                                    case 'createVersion':

                                    Ext.widget('createVersionWindow');			


                                    break;
                                    case 'showVersion':

                                    var itemId = 'overviewVersionGrid';

                                    // console.log(Ext.getCmp('viewport').getComponent('centerTabPanel').getComponent(itemId));

                                    if(!Ext.getCmp('viewport').getComponent('centerTabPanel').getComponent(itemId))
                                    {
                                        Ext.getCmp('viewport').getComponent('centerTabPanel').add({
                                            title: 'Versionsverwaltung',
                                            tabConfig: {           
                                                tooltip: 'Versionsverwaltung'
                                            },
                                            items: {
                                                xtype: 'overviewVersionGrid'
                                            },	
                                            layout: {
                                            	type: 'fit'
                                            },
                                            itemId: itemId,
                                            closable: true
                                        }).show();
                                    } else {
                                        Ext.getCmp('viewport').getComponent('centerTabPanel').setActiveTab(itemId);
                                    }

                                    // Store fuer Kontaktpersonen laden
                                    Ext.data.StoreManager.lookup('versionManagementStore').load();


                                    break;
                                }	

                            }

                        }
                    }

                }]
            });	
			}
            Ext.getCmp('panelSettings').doLayout();

        }



        // Administrator
        if (isAdmin === true) {
			var pas = Ext.getCmp('panelSettings').down('panelAdminSettings');
			if(!pas) {
            Ext.getCmp('panelSettings').add({
                xtype: 'panel',
                id: 'panelAdminSettings',
                title: 'Administrator',
                items: [{  
                    xtype: 'treepanel',
                    id: 'TreePanelUsers',
                    store: new Ext.data.TreeStore({
                        root: {
                            expanded: true, 
                            text: 'Benutzerverwaltung',
                            children: [{
                                text: 'Benutzer anzeigen',
                                id: 'showUser',
                                iconCls: 'user',
                                leaf: true								
                            },{
                                text: 'Benutzer hinzuf&uuml;gen',
                                id: 'createUser',
                                iconCls: 'user_add',
                                leaf: true
                            }]
                        }
                    }),
                    listeners: {
                        itemclick: {
                            fn: function(view, record, item, index, e, obj){

                                // console.log('record ID: ' + record.get('id'))
                                var clickId = record.get('id');

                                switch (clickId) {
                                    case 'createUser':
                                    Ext.widget('newStaffForm');
                                    break;
                                    case 'showUser':

                                    var itemId = 'overviewUsersGrid';

                                    if(!Ext.getCmp('viewport').getComponent('centerTabPanel').getComponent(itemId))
                                    {
                                        Ext.getCmp('viewport').getComponent('centerTabPanel').add({
                                            title: 'Benutzer&uuml;bersicht',
                                            tabConfig: {           
                                                tooltip: 'Benutzer&uuml;bersicht'
                                            },
                                            items: {
                                                xtype: 'allUsersGrid'
                                            },	
                                            layout: {
                                            	type: 'fit'
                                            },
                                            itemId: itemId,
                                            closable: true
                                        }).show();
                                    } else {
                                        Ext.getCmp('viewport').getComponent('centerTabPanel').setActiveTab(itemId);
                                    }

                                    // Store fuer Kontaktpersonen laden
                                    Ext.data.StoreManager.lookup('allStaffStore').load();

                                    break;
                                }	
                            }
                        }
                    }
                }/*,{				 
                    xtype: 'treepanel',
                    id: 'TreePanelCalendar',
                    store: new Ext.data.TreeStore({
                        root: {
                            expanded: true, 
                            text: 'Kalender',
                            children: [{
                                text: 'Kalender-Liste anzeigen',
                                id: 'showCalendarList',
                                iconCls: 'calendar',
                                leaf: true
                            }, {
                                text: 'Kalender-Liste hinzuf&uuml;gen',
                                id: 'addCalendarList',
                                iconCls: 'calendar_add',
                                leaf: true								
                            }]
                        }
                    }),
                    listeners: {
                        itemclick: {
                            fn: function(view, record, item, index, e, obj){
                                Ext.Msg.alert('Info', 'Erst in der n&auml;chsten Version verf&uuml;gbar!');

                            }
                        }
                    }

                    }*/
                    ]

                    });
                    }
                    Ext.getCmp('panelSettings').doLayout();

                    }
    }

});