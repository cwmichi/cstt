/*
 * File: app/view/actionWindow.js
 *
 * This file was generated by Sencha Designer version 2.0.0.
 * http://www.sencha.com/products/designer/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Designer does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

Ext.define('cstt.view.actionWindow', {
    extend: 'cstt.view.ui.actionWindow',
    alias: 'widget.actionWindow',

    initComponent: function() {
        var me = this;
        me.callParent(arguments);
    },
    
    onWindowBeforeRender: function(abstractcomponent, options) {
		Ext.data.StoreManager.lookup('allStaffEmailStore').load();
    },

    onCancelClick: function(button, e, options) {
        this.close();
    },

    onEditClick: function(button, e, options) {
        if (this.down('form').getForm().isValid()) {

            var record = this.down('form').getRecord();	
           
            //console.log(record);
           this.down('form').getForm().updateRecord(record);				 

            Ext.getCmp(this.actionCommentGridExtJsID).getStore().sync();
            Ext.getCmp(this.actionCommentGridExtJsID).getStore().removeAll();
            
            
            
            if (this.down('#changeStatus') !== null) {
            	
            	var statusValue = this.down('#changeStatus').getValue();
            	
            	switch(parseInt(statusValue)) {
	            	case 2:
	            		this.action = "progressSupport";
	            	break;
	            	case 3:
	            		this.action = "progressCustomer";
	            	break;
	            	case 4:
	            		this.action = "progressDevelopment";
	            	break;
	            	case 5:
	            		this.action = "progressSolution";
	            	break;
	            	case 6:
	            		this.action = "progressEscalation";
	            	break;
	            	case 7:
	            		this.action = "progressEscalationSales";
	            	break;
	            	case 8:
	            		this.action = "progressDeferred";
	            	break;
	            	case 9:
	            		this.action = "progressDevelopmentOffice";
	            	break;
	            	
	            	
	            	
            	}

	           	Ext.Ajax.request({
	                method: 'POST',
	                scope: this,
	                url: '../../_design/cstt/_update/updateTicketAction/'+this.couchDBTicketDocID+'?action='+this.action,			
	                // Die Formular-Eingaben uebergeben
	                params: this.down('form').getForm().getValues(),
	                success: function() {
	                	Ext.getCmp(this.actionCommentGridExtJsID).up('showOneTicket').updateContent();
	                	Ext.getCmp('centerTabPanel').getComponent('currentTicketsTab').down('#currentTicketsGrid').onRefreshClick();
                    	Ext.getCmp('centerTabPanel').getComponent('currentTicketsTab').down('#currentTicketsGrid').doLayout();
	                }
	            });
            
            	
            	
            }

            this.close();

            Ext.MessageBox.show({
                title: 'Status',
                msg: 'Änderungen wurden gespeichert.',
                buttons: Ext.MessageBox.OK,
                scope: this,
                fn: function() {
                    Ext.example.msg('Status', 'Synchronisierung');	
                    Ext.getCmp(this.actionCommentGridExtJsID).onRefreshClick();
                }
            });



        }
        else {		
            // Zeige Warnung - nicht alle Felder ausgefï¿½llt
            boxWarningRequiredFields();	
        }
    },

    onSaveClick: function(button, e, options) {
        // Formularüberprüfung
        if (this.down('form').getForm().isValid()) {

            // Wait Message anzeigen	
            Ext.MessageBox.wait('Speichern ...', 'Bitte warten ...');

            var currentDate = new Date();
            this.down('#createdOn').setValue(Ext.util.Format.date(currentDate,'Y-m-d H:i:s'));
            this.down('#staff_ID').setValue(sessionUserID);

            Ext.Ajax.request({
                method: 'POST',
                scope: this,
                url: '../../_design/cstt/_update/updateTicketAction/'+this.couchDBTicketDocID+'?action='+this.down('#action').getValue(),			
                // Die Formular-Eingaben uebergeben
                params: this.down('form').getForm().getValues()
            });


            Ext.Ajax.request({
                method: 'POST',
                url: '../../',
                // Header auf application/json setzen - CouchDB
                headers: {
                    'Content-Type': 'application/json; charset=utf-8'
                },
                // Die Formular-Eingaben uebergeben
                params: Ext.JSON.encode(this.down('form').getForm().getValues()),
                scope: this,
                 success: function (result, request ) {				
                    // Get JSON 
                    var json = Ext.JSON.decode(result.responseText);                   
                                
             // Mail Spooler       
            Ext.Ajax.request({
                method: 'POST',
                url: '../../',
                // Header auf application/json setzen - CouchDB
                headers: {
                    'Content-Type': 'application/json; charset=utf-8'
                },
                // Die Formular-Eingaben uebergeben
                jsonData: {
                	mail_spool: 'spooler',
                	spooled: false,
                	mailType: 'action',
                	action: this.down('#action').getValue(),
                	comment: this.down('#comment').getValue(),
					createdOn: this.down('#createdOn').getValue(),
					emailTo: this.down('#emailTo').getValue(),
					staffName: sessionFullUsername,
					staffMail: sessionEmail,
					staff_ID: this.down('#staff_ID').getValue(),
					status: this.down('#status').getValue(),
					ticket_ID: this.down('#ticket_ID').getValue(),
					title: this.down('#title').getValue()
				 }
               });
            
                    
                    
                    
                    
                    
                    
                    
                    
                           
                    
                    // Fenster schliessen
                    this.close();

                    // Wait Message verbergen			
                    Ext.MessageBox.hide();

                    // Ticket als Tab - Inhalte aktualisieren
                    Ext.getCmp(this.showOneTicketExtJsID).updateContent();
                    
                   	//Ext.data.StoreManager.lookup('ticketCurrentStore').load();
                    Ext.getCmp('centerTabPanel').getComponent('currentTicketsTab').down('#currentTicketsGrid').onRefreshClick();
                    Ext.getCmp('centerTabPanel').getComponent('currentTicketsTab').down('#currentTicketsGrid').doLayout();



                },
                failure: function(){

                    // Wait Message verbergen			
                    Ext.MessageBox.hide();

                    // Zeige Fehler während des Speicherns			
                    boxErrorDuringSaving();			  
                }
            });
        }
        else {		
            // Zeige Warnung - nicht alle Felder ausgefüllt
            boxWarningRequiredFields();	
        }
    }

});