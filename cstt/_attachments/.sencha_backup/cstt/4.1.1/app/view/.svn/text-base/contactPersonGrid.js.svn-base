/*
 * File: app/view/contactPersonGrid.js
 *
 * This file was generated by Sencha Designer version 2.0.0.
 * http://www.sencha.com/products/designer/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Designer does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

Ext.define('cstt.view.contactPersonGrid', {
    extend: 'cstt.view.ui.contactPersonGrid',
    alias: 'widget.contactPersonGrid',

    initComponent: function() {
        var me = this;
        me.callParent(arguments);
    },

    onRefreshClick: function(button, e, options) {
        if (this.couchDBDocID == 'null') {
            this.store.load();
        } else {
            this.store.load({
                params: {
                    "key": '"'+this.couchDBDocID+'"'
                }
            });
        }
    },

    onPreviousClick: function(button, e, options) {
        var me = this,
            idx;

        if ((idx = Ext.Array.indexOf(me.indexes, me.currentIndex)) !== -1) {
            me.currentIndex = me.indexes[idx - 1] || me.indexes[me.indexes.length - 1];
            me.getSelectionModel().select(me.currentIndex);
        }
    },

    onNextClick: function(button, e, options) {
        var me = this,
            idx;

        if ((idx = Ext.Array.indexOf(me.indexes, me.currentIndex)) !== -1) {
            me.currentIndex = me.indexes[idx + 1] || me.indexes[0];
            me.getSelectionModel().select(me.currentIndex);
        }
    },

    onAddClick: function(button, e, options) {
        var contactWindow = Ext.widget('createContactWindow');
       
        if (this.couchDBDocID != 'null') {
        	contactWindow.contactGridExtJSID = this.getId();
        	contactWindow.down('#companyCombo').setValue(this.couchDBDocID);
        	contactWindow.down('#companyCombo').setReadOnly(true);
        }
    },

    onEditClick: function(button, e, options) {
        selectContact = this.getView().getSelectionModel().getSelection()[0];

        if (selectContact) {
            var contactWindow = Ext.widget('createContactWindow');

            contactWindow.setTitle('Kontaktperson editieren ...');
            contactWindow.contactGridExtJSID = this.getId();
            contactWindow.setIconCls('database_edit');
            contactWindow.down('form').getForm().loadRecord(selectContact);	
            contactWindow.down('#save').hide();
            contactWindow.down('#edit').show();		

        }
        else {
            Ext.MessageBox.show({
                title: 'Hinweis',
                msg: 'Bitte w&auml;hlen Sie zuerst eine Kontaktperson aus!',
                buttons: Ext.MessageBox.OK,
                icon: Ext.MessageBox.INFO
            });
        }
    },

    onDeleteClick: function() {
        /* userdelete = this.getView().getSelectionModel().getSelection()[0];
        if (userdelete) {
        this.store.remove(userdelete);
        }
        */;
    },

    getSearchValue: function() {
        var me = this,
            value = me.textField.getValue();
        //console.log(value);

        if (value === '') {
            return null;
        }
        if (!me.regExpMode) {
            value = value.replace(me.regExpProtect, function(m) {
                return '\\' + m;
            });
        } else {
            try {
                new RegExp(value);
            } catch (error) {
                me.statusBar.setStatus({
                    text: error.message,
                    iconCls: 'x-status-error'
                });

                return null;
            }
            // this is stupid
            if (value === '^' || value === '$') {
                return null;
            }
        }

        var length = value.length,
            resultArray = [me.tagsProtect + '*'],
            i = 0,
            c;

        for(; i < length; i++) {
            c = value.charAt(i);
            resultArray.push(c);
            if (c !== '\\') {
                resultArray.push(me.tagsProtect + '*');
            } 
        }
        return resultArray.join('');
    },

    onTextfieldChange: function(field, newValue, oldValue, options) {
        var me = this,
            count = 0;

        me.view.refresh();
        // reset the statusbar
        me.statusBar.setStatus({
            text: me.defaultStatusText,
            iconCls: ''
        });


        me.searchValue = me.getSearchValue();

        me.indexes = [];
        me.currentIndex = null;

        if (me.searchValue !== null) {
            me.searchRegExp = new RegExp(me.searchValue, 'g' + (me.caseSensitive ? '' : 'i'));


            me.store.each(function(record, idx) {
                var td = Ext.fly(me.view.getNode(idx)).down('td'),
                    cell, matches, cellHTML;
                while(td) {
                    cell = td.down('.x-grid-cell-inner');
                    matches = cell.dom.innerHTML.match(me.tagsRe);
                    cellHTML = cell.dom.innerHTML.replace(me.tagsRe, me.tagsProtect);

                    // populate indexes array, set currentIndex, and replace wrap matched string in a span
                    cellHTML = cellHTML.replace(me.searchRegExp, function(m) {
                        count += 1;
                        if (Ext.Array.indexOf(me.indexes, idx) === -1) {
                            me.indexes.push(idx);
                        }
                        if (me.currentIndex === null) {
                            me.currentIndex = idx;
                        }
                        return '<span class="' + me.matchCls + '">' + m + '</span>';
                    });
                    // restore protected tags
                    Ext.each(matches, function(match) {
                        cellHTML = cellHTML.replace(me.tagsProtect, match); 
                    });
                    // update cell html
                    cell.dom.innerHTML = cellHTML;
                    td = td.next();
                }
            }, me);

            // results found
            if (me.currentIndex !== null) {
                me.getSelectionModel().select(me.currentIndex);
                me.statusBar.setStatus({
                    text: count + ' Ergebnis(se) gefunden.',
                    iconCls: 'status-valid'
                });

            }
        }

        // no results found
        if (me.currentIndex === null) {
            me.getSelectionModel().deselectAll();
        }

        // force textfield focus
        me.textField.focus();
    },

    onGridpanelBeforeRender: function(abstractcomponent, options) {
        abstractcomponent.addDocked({
            dock: 'bottom',
            xtype: 'statusbar',
            itemId: 'searchStatusBar',
            defaultText: this.defaultStatusText,
            name: 'searchStatusBar'
        });


    }

});