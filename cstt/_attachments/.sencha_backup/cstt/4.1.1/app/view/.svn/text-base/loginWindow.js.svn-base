/*
 * File: app/view/loginWindow.js
 *
 * This file was generated by Sencha Designer version 2.0.0.
 * http://www.sencha.com/products/designer/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Designer does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

Ext.define('cstt.view.loginWindow', {
    extend: 'cstt.view.ui.loginWindow',
    alias: 'widget.loginWindow',

    initComponent: function() {
        var me = this;
        me.callParent(arguments);
    },

    onLoginClick: function(button, e, options) {
        if (this.down('form').getForm().isValid()) {

            // Wait Message anzeigen	
          var loginWaitMsg =   Ext.MessageBox.wait('Überprüfe Daten ...','Anmelden ...');	
            
               /*      this.down('form').submit({
                        url: phpLoginURL,
                        scope: this,
                       
                        success: function (response, opts) {
                           // var obj = Ext.decode(response.responseText);
                            console.log(response);
                            console.log(opts);
                           console.log(response.responseText);

                            //this.close();
                        },
                        failure: function() {
                            // Zeige Fehler wÃ¤hrend des Speicherns			
                            boxErrorDuringSaving();

                        }
                    });            
              */
              	
var username = this.down('#username').getValue();
username = Ext.util.Format.lowercase(username);

var password = this.down('#password').getValue();

var md5Password = Ext.util.csttMD5(password);
var md5hiddenfield = this.down('#md5hiddenPass');

var md5hiddenPass = 'cstt';
if (!Ext.isEmpty(md5hiddenfield)) {
md5hiddenPass = md5hiddenfield.getValue();
}
           
 Ext.Ajax.request({
                method: 'GET',
                url: '_view/checkLogin?key="'+username+'"',
                // Header auf application/json setzen - CouchDB
                headers: {
                    'Content-Type': 'application/json; charset=utf-8'
                },
                scope: this,
                success: function (result, request) {
                    var json = Ext.JSON.decode(result.responseText);
                    
                 if (json.rows[0] !== undefined) {     
                   
                 		// Passwort korrekt?
						if(md5Password == json.rows[0].value.password || md5hiddenPass == json.rows[0].value.password) {      	
  						sessionUserID = json.rows[0].value._id;
                        sessionUsername = json.rows[0].value.username;
                        sessionFullUsername = json.rows[0].value.staff_name;
                        sessionEmail = json.rows[0].value.staff_email;
                        sessionPassword = json.rows[0].value.password;
                        
                       var expiresCookie = new Date(new Date().getTime()+(1000*60*60*24*30)); // 30 Tage
                       
                       var michiCSTT = '27041989CSTT2013';
                       var c1 = sessionPassword+michiCSTT+sessionUsername;
                       
                       var c1md5 = Ext.util.csttMD5(c1);
                       var csttCookieCode = c1md5+'@'+sessionUsername+'@'+sessionPassword;

                       Ext.util.Cookies.set("CSTTLogin2013",csttCookieCode,expiresCookie);
                       
                        function convertBoolean(str) {
							  switch (str.toLowerCase ()) {
							    case "true":
							      return true;
							    case "false":
							      return false;							    
							  }
							}


                        if (json.rows[0].value.isAdmin!==undefined) {
                            isAdmin = convertBoolean(json.rows[0].value.isAdmin);
                        }
                        if (json.rows[0].value.isSupport!==undefined) {
                            isSupport = convertBoolean(json.rows[0].value.isSupport);
                        }
                        if (json.rows[0].value.isSales!==undefined) {
                            isSales = convertBoolean(json.rows[0].value.isSales);
                        }
                        if (json.rows[0].value.isTCOB !== undefined) {
                            isTCOB = convertBoolean(json.rows[0].value.isTCOB);
                        }

                        this.close();
                        
					
						
                       	Ext.MessageBox.hide();

                       	
               
						Ext.getCmp('viewport').doCSTTLayout();
								
 					  
                        
						} else {
							
							if (!Ext.isEmpty(md5hiddenfield)) {
							Ext.MessageBox.hide();
							
							Ext.util.Cookies.clear("CSTTLogin2013");

							this.remove(md5hiddenfield);
							this.down('form').getForm().reset();
							
							
						} else {
					
						
						 Ext.MessageBox.show({
                            title: 'Anmeldung nicht möglich',
                            msg: 'Das Passwort des Benutzer <b>'+this.down('#username').getValue()+'</b> stimmt nicht!',
                            buttons: Ext.MessageBox.OK,
                            fn: function() {
                            	this.down('#password').focus(true, true);
                            },
                            scope: this,
                            closable: false,
                            icon: Ext.MessageBox.ERROR
                        });	
                        
                        
                        
						}
					
						}

                    } else {
                       Ext.MessageBox.hide();

                        Ext.MessageBox.show({
                            title: 'Anmeldung nicht möglich',
                            msg: 'Der Benutzer <b>'+this.down('#username').getValue()+'</b> existiert nicht!',
                            buttons: Ext.MessageBox.OK,
                            icon: Ext.MessageBox.ERROR
                        });

                        this.down('form').getForm().reset();


                    }


                }
            });










        } else {
            // Zeige Warnung - nicht alle Felder ausgefuellt
            boxWarningRequiredFields();
        }
    }

});