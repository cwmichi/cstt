/*
 * File: app/view/ui/customerGrid.js
 *
 * This file was generated by Sencha Designer version 2.0.0.
 * http://www.sencha.com/products/designer/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Designer does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('cstt.view.ui.customerGrid', {
    extend: 'Ext.grid.Panel',
    requires: [
        'cstt.view.companyComboBox'
    ],

    height: 350,
    autoScroll: true,
    title: 'Kundenübersicht',
    store: 'allCustomersStore',
    overflow: 'auto',
    anchor: '100%',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            columns: [
                {
                    xtype: 'gridcolumn',
                    itemId: 'companyColumn',
                    width: 220,
                    dataIndex: 'company',
                    text: 'Kundenname'
                },
                {
                    xtype: 'gridcolumn',
                    itemId: 'supportToColumn',
                   //  renderer: render_supportTo,
                    width: 70,
                    dataIndex: 'support_convert',
                    text: 'Support'
                },
                {
                    xtype: 'gridcolumn',
                    itemId: 'editionProductColumn',
                    width: 135,
                    dataIndex: 'editionProduct',
                    text: 'Edition'
                },
                {
                    xtype: 'gridcolumn',
                    itemId: 'contactsColumn',
                    renderer: renderer_contactIcon,
                    width: 50,
                    dataIndex: '_id',
                    text: 'Kontakt'
                },
                {
                    xtype: 'gridcolumn',
                    itemId: 'detailsColumn',
                    renderer: renderer_DetailsIcon,
                    width: 50,
                    dataIndex: '_id',
                    text: 'Details'
                },
                {
                    xtype: 'gridcolumn',
                    itemId: 'accountidColumn',
                    width: 60,
                    dataIndex: 'accountid',
                    text: 'VTiger ID'
                }
            ],
            viewConfig: {
                emptyText: 'Keine Kunden vorhanden ...',
                loadingText: 'Lade Kunden ...'
            },
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    items: [
                        {
                            xtype: 'button',
                            iconCls: 'x-tbar-loading',
                            text: 'Aktualisieren',
                            tooltip: 'Aktualisieren ...',
                            listeners: {
                                click: {
                                    fn: me.onRefreshClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'tbseparator'
                        },
                        {
                            xtype: 'companyComboBox',
                            width: 250,
                            name: 'customerDocID',
                            labelWidth: 40,
                            allowBlank: true,
                            queryMode: 'local',
                            listeners: {
								select: {
									scope: this,
									fn: function(combo, value){
										this.getStore().load({
											params: {
												"key": '"'+combo.getValue()+'"'
											}
										});
										
										this.focus();
										
										// var grid = '';
										// fnShowAllTicketsToCustomer(grid, combo);
										var tCustomerGrid = Ext.getCmp('viewport').getComponent('centerTabPanel').getComponent('customerGridTab').getComponent('ticketsToCustomerGrid');
										// Title setzen
										tCustomerGrid.setTitle('&Uuml;bersicht der Tickets zu Kunde:&nbsp;'+combo.getRawValue());
										
										var toolbar = tCustomerGrid.getDockedItems('toolbar[dock="top"]');
                                		var txtCounter =  toolbar[0].down('#txtCounter');
                                		
                                		tCustomerGrid.couchDBDocID = combo.getValue();
                                
										tCustomerGrid.getStore().load({
											params: {
												"key": '"'+combo.getValue()+'"'
											},
											callback: function() {
		                                		txtCounter.setText('<b>Anzahl der Tickets: ' + tCustomerGrid.getStore().count()+'</b>');
		                                		txtCounter.show();
		                                	}
										});
										
										toolbar[0].down('#reloadButton').enable();
										
                                
										combo.reset();
										
									}
								}
							},
                            store: 'companyComboBoxStore'
                        },
                        {
                            xtype: 'tbseparator'
                        },
                        {
                            xtype: 'button',
                            iconCls: 'database_add',
                            text: 'Neuen Kunden anlegen',
                            tooltip: 'Neuen Kunden anlegen ...',
                            listeners: {
                                click: {
                                    fn: me.onAddClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'tbseparator'
                        },
                        {
                            xtype: 'button',
                            itemId: 'editCustomerButton',
                            iconCls: 'database_edit',
                            text: 'Kunde editieren',
                            tooltip: 'Editiert den Kunden ...',
                            listeners: {
                                click: {
                                    fn: me.onEditClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'tbseparator'
                        },
                        {
                            xtype: 'button',
                            iconCls: 'database_go',
                            text: 'Versionsübersicht',
                            tooltip: 'Zeigt die Versionsaktualisierungen vom Kunden ...',
                            listeners: {
                                click: {
                                    fn: me.pressButtonHistoryVersionCustomer,
                                    scope: me
                                }
                            }
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    },

    onRefreshClick: function(button, e, options) {
    },

    onAddClick: function(button, e, options) {
    },

    onEditClick: function(button, e, options) {
    },

    pressButtonHistoryVersionCustomer: function(button, e, options) {
    }

});